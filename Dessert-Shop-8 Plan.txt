----------------------------------------------
Problem
----------------------------------------------
Sort items on the receipt based on price
	- least expensive (top) - most expensive
		(bottom)

----------------------------------------------

----------------------------------------------
Changes
----------------------------------------------
DessertItem class
	- Decorate DessertItem with
		@functools.total_ordering 
		decorator
	- is_valid_operand() helper method
		referencing the price
	- __eq__ and __lt__ operators using
		price

Main
	- Sort dessert items in order
		> after all items are added,
			but before printed

Test Cases
	- Add test cases to test all the 
		relational operators
		(=, <, <=, >, >=)

----------------------------------------------


	
Main
	> Arjun = student(8.6)
	Ram = student(7.5)

	print(Arjun.__lt__(Ram)
		=> returns false

	print(Arjun.__eq__(Ram)
		=> returns false







@total_ordering
class Student:






    def _is_valid_operand(self, other):
        return (hasattr(other, "lastname") and
                hasattr(other, "firstname"))



    def __eq__(self, other):
        if not self._is_valid_operand(other):
            return NotImplemented
        return ((self.lastname.lower(), self.firstname.lower()) ==
                (other.lastname.lower(), other.firstname.lower()))




    def __lt__(self, other):
        if not self._is_valid_operand(other):
            return NotImplemented
        return ((self.lastname.lower(), self.firstname.lower()) <










_lt__(), __le__(), __gt__(), or __ge__().










change every thing to call it price()






















