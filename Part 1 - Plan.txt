Description:
Dessert Shop sells:
	- Candy by the pound
	- Cookies by the dozen
	- Ice Cream by the scoop
	- Sundaes (Ice Cream & Topping)

structure for a Dessert shop:
	- No user interface
	- No input/output
	- Will be tested using automated cases
	- Test code can be (your choice):
		- Simple asserts (built-in)
		- Unittest code (built-in)
		- Python code
		- doctests (built-in)
		- pytest is a 3rd party module
			> easier to write code for
			uniyttest and will run
			uniyttest code
	- Framework:
		- Implement inheritance 
		hierarchy of classes derived
		from DessertItem superclass
		Candy, Cookie, and IceCream
		classes will derive from the
		DessertItem class.
		Sundae will derive from the
		IceCream class.

Class Structure:
	- DessertItem Superclass
		> name a string attribute

		> constructor with one param
		that sets the name attribute
		to the passed-in value
		default value = empty string

	- Subclasses
	Candy, Cookie, IceCream, Sundae
		> Constructor with enough
		params to initialize all 
		attributes of the object, 
		(including superclass)

		> All Params must have
		reasonable default values

		> Constructor must call the
		superclass constructor

	Candy:
		- candy_weight: float
		- price_per_pound: float

	Cookie:
		- cookie_quantity: int
		- price_per_dozen: float

	IceCream:
		- scoop_count: int
		- price_per_scoop: float

	Sundae:
		- topping_name
		- topping_price




Test Cases
	- May use built-in unitest module

	- May use pytest
		> download with pip
		(python3 -m pip install pytest)
		in terminal

	- To write a pytest case, write a
	function whose name starts with the
	prefix "test"
		> ex: test_inc is test case
		def inc(x):
			return x4 + 1

		def test_inc():
			assert inc(3) ==4
	
	1. Can write a collection of test
	functions. Be sure to give each test
	function a unique name. Test functions
	go in test_dessert.py (file)

	2. Inside the test function you can
	create an object, test it, initialize
	it and modify it or put any code
	that will be needed to set up a test
	with an assertion.

	Ex: Could create a Cookie object and
	then test it's attributes with one
	or more assertions after the 
	constructor


Reading Attribute Values
	1. Call constructor with default vals
	2. Test each attribute for expected
		default val
	3. Call constructor with non-default
		vals
	4. Test each attribute for expected 
		vals


Modifying Attribute Values
	1. Call constructor with default vals
	2. Modify an attribute
	3. Test new attribute to see if new 
		val
	4. Repeat steps 2 & 3 for each 
		attribute
	5. Call constructor with non-default
		vals
	6. Modify an attribute
	7. Test new attribute to see if new 
		val
	8. Repeat steps 6 & 7 for each 
		attribute



Grading
	- All classes are implemented 
		according to description

	- All test cases are implemented
		correctly

	- All test cases pass

	- Dessert classes are in desserts.py

	- Test code is in test_desserts.py

	- Test code is run with command
		python -m pytest test_dessert.py
		or an equivalent command 
		specified in module docstring

